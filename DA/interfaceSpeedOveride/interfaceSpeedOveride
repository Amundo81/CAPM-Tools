#!/usr/bin/env python
# -*- coding: utf-8 -*-

from progressbar import Bar, Percentage, ProgressBar
from threading import  Thread
from requests import post, put
import argparse
import untangle
import re
import logging
import sys
from Queue import Queue
from threading import Thread

parser = argparse.ArgumentParser()
parser.add_argument("-U", "--url", default=u'localhost')
parser.add_argument("-P", "--port", type=int, default=8581)
parser.add_argument("-t", "--threads", type=int, default=4)
parser.add_argument("--debug", action="store_true")
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("-s", "--statusbar", action="store_true")
args = parser.parse_args()

logger = logging.getLogger('interfaceSpeedOveride')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()

if args.debug:
    ch.setLevel(logging.DEBUG)
elif args.verbose:
    ch.setLevel(logging.INFO)
else:
    ch.setLevel(logging.WARNING)
formatter = logging.Formatter('%(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

reload(sys) # just to be sure
sys.setdefaultencoding('utf-8')

class Worker(Thread):
    """ Thread executing tasks from a given tasks queue """
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try:
                func(*args, **kargs)
            except Exception as e:
                # An exception happened in this thread
                print(e)
            finally:
                # Mark this task as done, whether an exception happened or not
                self.tasks.task_done()


class ThreadPool:
    """ Pool of threads consuming tasks from a queue """
    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads):
            Worker(self.tasks)

    def add_task(self, func, *args, **kargs):
        """ Add a task to the queue """
        self.tasks.put((func, args, kargs))

    def map(self, func, args_list):
        """ Add a list of tasks to the queue """
        for args in args_list:
            self.add_task(func, args)

    def wait_completion(self):
        """ Wait for completion of all the tasks in the queue """
        self.tasks.join()

payload = u"""
<FilterSelect xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="filter.xsd">
	<Filter>
		<And>
            <Port.Alias type="REGEX">\S+\d{4}:\S+:\d+(M|G|m|g)\:\S+:.*</Port.Alias>
		</And>
	</Filter>
	<Select use="exclude"  isa="exclude">
		<Port use="exclude"> 
			<Alias use="include"/>
            <SpeedOutOverride use="include"/>
			<SpeedInOverride use="include"/>
		</Port>
	</Select>
</FilterSelect>"""

def convertSpeed(string=None):
    if string is None:
        return None

    speed = 0
    (i, m) = re.findall(u'(\\d+)(\\w+)', string)[0]

    if m.lower() == u'm':
        speed = int(i) * 1000000

    if m.lower() == u'g':
        speed = int(i) * 1000000000

    return speed

def formatXml(ifAlias=None, speedIn=None, speedOut=None):
   # This prints a passed string into this function
    if re.match(u'\S+\d{4}:\S+:\d+(M|G|m|g)\:\S+:.*', ifAlias):
        (circId, cid, s, p, d) = re.findall(u'(.*)\:(.*)\:(\d+\w+)\:(.*)\:(.*)', ifAlias)[0]
        speed = convertSpeed(s)
        if speed > 0 and (speedIn != speed or speedOut != speed):
            return u'<Port version="1.0.0"><SpeedOutOverride>{0}</SpeedOutOverride><SpeedInOverride>{0}</SpeedInOverride></Port>'.format(speed)
        else:
            return None
    else:
        return None


r = post(u"http://{0}:{1}/rest/ports/filtered/".format(args.url, args.port,), headers={u'Content-Type': u'application/xml'}, data=payload)
xmlPorts = untangle.parse(r.content)

def updateInterface(id=None, data=None):
    logger.debug('ID: {0} - DATA:{1}'.format(id, data))
    r = put(u"http://{0}:{1}/rest/ports/{2}".format(args.url, args.port, id), headers={u'Content-Type': u'application/xml'}, data=data)
    if r.status_code != 200:
        logger.error(u'### ID {0} FAILED {1} DATA {2} ###'.format(id, r.status_code, data))

try:
    # Instantiate a thread pool
    pool = ThreadPool(args.threads)

    portCount = 0
    if args.statusbar and not args.debug and not args.verbose:
        pbar = ProgressBar(widgets=[Percentage(), Bar()], maxval=len(xmlPorts.PortList.Port)).start()

    for port in xmlPorts.PortList.Port:
        if port.get_elements(name=u'Alias'):
            portCount = portCount + 1
            if port.get_elements(name=u'SpeedOutOverride') and port.get_elements(name=u'SpeedInOverride'):
                speedIn = int(float(port.SpeedInOverride.cdata))
                speedOut = int(float(port.SpeedOutOverride.cdata))
                rData = formatXml(ifAlias=port.Alias.cdata, speedIn=speedIn, speedOut=speedOut)
                if rData is not None:
                    pool.add_task(updateInterface, id=port.ID.cdata, data=rData)    
            else:
                rData = formatXml(ifAlias=port.Alias.cdata)
                if rData is not None:
                    pool.add_task(updateInterface, id=port.ID.cdata, data=rData)
            if args.statusbar and not args.debug and not args.verbose:
                pbar.update(portCount)

    if args.statusbar and not args.debug and not args.verbose:
        pbar.finish()

    pool.wait_completion()

except KeyboardInterrupt:
    logger.error(u'Exiting')
