#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import, unicode_literals
from xml.sax.saxutils import escape
from progressbar import Bar, Percentage, ProgressBar
from threading import  Thread
from requests import get, put
import argparse
import untangle
import re
import logging
import sys
IS_PY2 = sys.version_info < (3, 0)
if IS_PY2:
    from Queue import Queue
else:
    from queue import Queue

from threading import Thread

parser = argparse.ArgumentParser()
parser.add_argument("-U", "--url", default=u'localhost')
parser.add_argument("-P", "--port", type=int, default=8181)
parser.add_argument("-u", "--user", default=u'admin')
parser.add_argument("-p", "--password", default=u'admin')
parser.add_argument("-t", "--threads", type=int, default=4)
parser.add_argument("--debug", action="store_true")
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("-s", "--statusbar", action="store_true")
parser.add_argument("-Do", "--domainsexception", nargs='*')
parser.add_argument("-d", "--devices", nargs='*')
parser.add_argument("-D", "--devicesexception", nargs='*')
args = parser.parse_args()


logger = logging.getLogger('interfaceUpdate')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()

if args.debug:
    ch.setLevel(logging.DEBUG)
elif args.verbose:
    ch.setLevel(logging.INFO)
else:
    ch.setLevel(logging.WARNING)
formatter = logging.Formatter('%(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

reload(sys) # just to be sure
sys.setdefaultencoding('utf-8')

class Worker(Thread):
    """ Thread executing tasks from a given tasks queue """
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try:
                func(*args, **kargs)
            except Exception as e:
                # An exception happened in this thread
                print(e)
            finally:
                # Mark this task as done, whether an exception happened or not
                self.tasks.task_done()


class ThreadPool:
    """ Pool of threads consuming tasks from a queue """
    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads):
            Worker(self.tasks)

    def add_task(self, func, *args, **kargs):
        """ Add a task to the queue """
        self.tasks.put((func, args, kargs))

    def map(self, func, args_list):
        """ Add a list of tasks to the queue """
        for args in args_list:
            self.add_task(func, args)

    def wait_completion(self):
        """ Wait for completion of all the tasks in the queue """
        self.tasks.join()

def updateDevice(device):
    ifCount = 0
    deviceUri = u"http://{0}:{1}/pc/center/webservice/devices/deviceItemId/{2}".format(args.url, args.port, device.itemId.cdata)
    xmlstring = u'<interfaces>'
    interfacesRequest = get(deviceUri+u"/interfaces", auth=(args.user, args.password))
    xmlInterfaces = untangle.parse(interfacesRequest.content)
    if xmlInterfaces.interfaces.get_elements(name=u'interface'):
        for interface in xmlInterfaces.interfaces.interface:
            if interface.get_elements(name=u'ifAlias') and (interface.ifAlias.cdata != interface.nameAlias.cdata) and interface.ifAlias.cdata != u'':
                ifCount += 1
                xmlstring += u'''<interface><itemId>{0}</itemId><nameAlias>{1}</nameAlias></interface>'''.format(interface.itemId.cdata, escape(interface.ifAlias.cdata))
        xmlstring += u' </interfaces>'
        if ifCount > 0:
            data = 0
            interfacesUpdateRequest = put(deviceUri+u"/setInterfaceNameAlias", data=xmlstring.encode('utf-8'), headers={u'Content-Type': u'application/xml'}, auth=(args.user, args.password))
            if interfacesUpdateRequest.status_code != 200:
                logger.error(u'Failed to update device ID {0} got {1} from server with xml data:\n{2}'.format(device.itemId.cdata, interfacesUpdateRequest.status_code, repr(xmlstring)))
            interfacesUpdateRequest.raise_for_status()
        else:
            xmlstring = u'No Interfaces update'
    else:
        xmlstring = u'No Interfaces update'

    logger.debug(u'Prossessed IP {0} - ID {1}:\n {2}\n'.format(device.address.cdata, device.itemId.cdata, xmlstring))

try:

    logger.debug(u'Starting downloading of devices:')
    deviceCount = 0
    # Instantiate a thread pool
    pool = ThreadPool(args.threads)

    if args.devices:
        if args.statusbar and not args.debug and not args.verbose:
            pbar = ProgressBar(widgets=[Percentage(), Bar()], maxval=len(args.devices)).start()
        for device in args.devices:
            deviceCount = deviceCount + 1
            logger.debug('fetching device ID: '+device)
            devicesRequest = get(u"http://{0}:{1}/pc/center/webservice/devices/deviceItemId/{2}".format(args.url, args.port, device), auth=(args.user, args.password))
            xmlDevice = untangle.parse(devicesRequest.content)
            pool.map(updateDevice, xmlDevice.device)
            if args.statusbar and not args.debug and not args.verbose:
                pbar.update(deviceCount)
    else:
        devicesRequest = get(u"http://{0}:{1}/pc/center/webservice/devices".format(args.url, args.port), auth=(args.user, args.password))
        xmlDevices = untangle.parse(devicesRequest.text)

        if args.statusbar and not args.debug and not args.verbose:
            pbar = ProgressBar(widgets=[Percentage(), Bar()], maxval=len(xmlDevices.devices.device)).start()

            for device in xmlDevices.devices.device:
                deviceCount = deviceCount + 1
                if ((args.domainsexception is None or
                     device.domainId.cdata not in args.domainsexception) and
                        (args.devicesexception is None or
                         device.itemId.cdata not in args.devicesexception)):
                    pool.map(updateDevice, device)
                if args.statusbar and not args.debug and not args.verbose:
                    pbar.update(deviceCount)

    if args.statusbar and not args.debug and not args.verbose:
        pbar.finish()

    pool.wait_completion()

except KeyboardInterrupt:
    logger.error(u'Exiting')
